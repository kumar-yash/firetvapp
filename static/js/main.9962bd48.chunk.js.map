{"version":3,"sources":["constants/applicationConstants.js","logo.svg","utils/liveStreamUtil.js","App.js","serviceWorker.js","index.js"],"names":["process","__webpack_require__","d","__webpack_exports__","liveStreamMockUrl","browser","module","exports","p","addLiveStreamSupport","videoElement","Hls","isSupported","hls","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","loadHLSForSupportingBrowser","canPlayType","src","addEventListener","loadHLSForUnsupportingBrowser","App","video","document","getElementById","react_default","a","createElement","className","id","style","display","justifyContent","map","item","margin","padding","background","border","width","height","tabIndex","logo","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAA,SAAAA,GAAAC,EAAAC,EAAAC,EAAA,sBAAAC,IAAO,IAAMA,EACX,2DAEwBJ,EAAQK,iDCHlCC,EAAAC,QAAiBN,EAAAO,EAAuB,0SCmB3BC,EAAuB,SAAAC,GAC9BC,IAAIC,cAjB0B,SAAAF,GAClC,IAAIG,EAAM,IAAIF,IACdE,EAAIC,WAAWV,KACfS,EAAIE,YAAYL,GAChBG,EAAIG,GAAGL,IAAIM,OAAOC,gBAAiB,WACjCR,EAAaS,SAabC,CAA4BV,GACnBA,EAAaW,YAAY,kCAVA,SAAAX,GACpCA,EAAaY,IAAMlB,IACnBM,EAAaa,iBAAiB,iBAAkB,WAC9Cb,EAAaS,SAQbK,CAA8Bd,ICqDnBe,8LAhEX,IAAMC,EAAQC,SAASC,eAAe,SACtCnB,EAAqBiB,kDAIrB,IDU0ChB,ECVpCgB,EAAQC,SAASC,eAAe,UDUIlB,ECTXgB,GDUpBH,iBAAiB,iBAAkB,WAC9Cb,EAAaS,0CCPb,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAKbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,GAAG,SAAV,MAEFJ,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,QAAS,OAAQC,eAAgB,eAVrC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAWpBC,IAAI,SAAAC,GAAI,OACbT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVE,MAAO,CACLK,OAAQ,OACRC,QAAS,OACTC,WAAY,gBACZC,OAAQ,iBACRC,MAAO,OACPC,OAAQ,QAEVC,SAAUP,GAEVT,EAAAC,EAAAC,cAAA,OAAKT,IAAKwB,IAAMd,UAAU,WAAWe,IAAI,sBApCvCC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAAS9B,SAASC,eAAe,SD2H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9962bd48.chunk.js","sourcesContent":["export const liveStreamMockUrl =\n  \"https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8\";\n\nexport const isClient = !!process.browser;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Hls from \"hls.js\";\nimport { liveStreamMockUrl } from \"../constants/applicationConstants\";\n\nconst loadHLSForSupportingBrowser = videoElement => {\n  let hls = new Hls();\n  hls.loadSource(liveStreamMockUrl);\n  hls.attachMedia(videoElement);\n  hls.on(Hls.Events.MANIFEST_PARSED, () => {\n    videoElement.play();\n  });\n};\n\nconst loadHLSForUnsupportingBrowser = videoElement => {\n  videoElement.src = liveStreamMockUrl;\n  videoElement.addEventListener(\"loadedmetadata\", () => {\n    videoElement.play();\n  });\n};\n\nexport const addLiveStreamSupport = videoElement => {\n  if (Hls.isSupported()) {\n    loadHLSForSupportingBrowser(videoElement);\n  } else if (videoElement.canPlayType(\"application/vnd.apple.mpegurl\")) {\n    loadHLSForUnsupportingBrowser(videoElement);\n  }\n};\n\nexport const removeLoadMetadataEventListner = videoElement => {\n  videoElement.addEventListener(\"loadedmetadata\", function() {\n    videoElement.play();\n  });\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport \"./firetv.scss\";\n// import Hls from \"hls.js\";\nimport {\n  addLiveStreamSupport,\n  removeLoadMetadataEventListner\n} from \"./utils/liveStreamUtil\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    const video = document.getElementById(\"video\");\n    addLiveStreamSupport(video);\n  }\n\n  componentWillUnmount() {\n    const video = document.getElementById(\"video\");\n    removeLoadMetadataEventListner(video);\n  }\n  render() {\n    const items = [1, 2, 3, 4, 5, 6, 7];\n    return (\n      <div className=\"App\">\n        {/* <div>\n          <input type=\"text\" />\n        </div>\n        <div>Live Videos</div> */}\n        <div>\n          <video id=\"video\"> </video>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"flex-start\" }}>\n          {items.map(item => (\n            <div>\n              <div\n                className=\"video-items\"\n                style={{\n                  margin: \"1rem\",\n                  padding: \"1rem\",\n                  background: \"darkslategray\",\n                  border: \"5px solid gray\",\n                  width: \"25vw\",\n                  height: \"auto\"\n                }}\n                tabIndex={item}\n              >\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n            </div>\n          ))}\n          {/* <div id=\"one-D-view-item-elements\" class=\"one-D-details-container\">\n            <div id=\"one-d-no-items\" class=\"one-d-no-items-container\">\n              No content found.\n            </div>\n            <div id=\"one-D-shoveler-container\" />\n            <div\n              id=\"one-D-summary-container\"\n              class=\"one-D-details-summary-text\"\n            >\n              <div id=\"summaryTitle\" class=\"one-D-summary-title\" />\n              <div id=\"summaryDate\" class=\"one-D-summary-pubdate\" />\n              <div id=\"summary-buttons-container\" />\n              <div id=\"summaryDesc\" class=\"one-D-summary-description\" />\n            </div>\n          </div> */}\n        </div>\n        {/* <div>\n          {items.map(item => (\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          ))}\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}