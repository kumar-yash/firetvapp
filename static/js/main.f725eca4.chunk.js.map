{"version":3,"sources":["constants/applicationConstants.js","logo.svg","l11.jpg","utils/liveStreamUtil.js","components/shovelerView/shovelerView.js","components/playerView/playerView.js","App.js","serviceWorker.js","index.js"],"names":["process","__webpack_require__","d","__webpack_exports__","liveStreamMockUrl","browser","module","exports","p","addLiveStreamSupport","videoElement","Hls","isSupported","hls","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","loadHLSForSupportingBrowser","canPlayType","src","addEventListener","loadHLSForUnsupportingBrowser","videoImg","React","Component","require","ShovelerView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playVideo","_this2","_this$props","rowNumber","colNumber","items","console","log","react_default","a","createElement","style","display","flexDirection","maxWidth","overflowX","height","map","item","className","onFocus","e","onClick","setState","alt","App","that","document","keyCode","shovelerView_shovelerView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f725eca4.chunk.js","sourcesContent":["export const liveStreamMockUrl =\n  \"https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8\";\n\nexport const isClient = !!process.browser;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/l11.6c13ecdd.jpg\";","import Hls from \"hls.js\";\nimport { liveStreamMockUrl } from \"../constants/applicationConstants\";\n\nconst loadHLSForSupportingBrowser = videoElement => {\n  let hls = new Hls();\n  hls.loadSource(liveStreamMockUrl);\n  hls.attachMedia(videoElement);\n  hls.on(Hls.Events.MANIFEST_PARSED, () => {\n    videoElement.play();\n  });\n};\n\nconst loadHLSForUnsupportingBrowser = videoElement => {\n  videoElement.src = liveStreamMockUrl;\n  videoElement.addEventListener(\"loadedmetadata\", () => {\n    videoElement.play();\n  });\n};\n\nexport const addLiveStreamSupport = videoElement => {\n  if (Hls.isSupported()) {\n    loadHLSForSupportingBrowser(videoElement);\n  } else if (videoElement.canPlayType(\"application/vnd.apple.mpegurl\")) {\n    loadHLSForUnsupportingBrowser(videoElement);\n  }\n};\n\nexport const removeLoadMetadataEventListner = videoElement => {\n  videoElement.addEventListener(\"loadedmetadata\", function() {\n    videoElement.play();\n  });\n};\n","import React from \"react\";\n\nimport { liveStreamMockUrl } from \"../../constants/applicationConstants\";\nimport PlayerView from \"../playerView/playerView\";\nimport \"./shovelerView.scss\";\n\nconst videoImg = require(\"../../l11.jpg\");\n\nclass ShovelerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playVideo: false\n    };\n  }\n  render() {\n    const { rowNumber, colNumber, play, items } = this.props;\n    const { playVideo } = this.state;\n    console.log(rowNumber, colNumber);\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          maxWidth: \"100vw\",\n          overflowX: \"scroll\",\n          height: \"30vh\"\n        }}\n      >\n        {items.map(item => (\n          <button\n            className=\"button-image\"\n            onFocus={e => console.log(\"wergEG\", item)}\n            onClick={e => {\n              this.setState({ playVideo: true, src: liveStreamMockUrl });\n            }}\n          >\n            <img\n              className=\"image-class\"\n              //   style={{ width: \" 100%\" }}\n              src={videoImg}\n              alt=\"logo\"\n            />\n            {/* {playVideo ? <PlayerView src={liveStreamMockUrl} /> : null} */}\n          </button>\n\n          //   <div\n          //     style={{\n          //       width:\n          //         rowNumber === 1 && colNumber === item - 1 ? \"45vw\" : \"35vw\",\n          //       padding: \"2rem\",\n          //       display: \"inline-block\"\n          //     }}\n          //   >\n          //     <img\n          //       style={{ boxShadow: \"0 0 10px black\" }}\n          //       src={videoImg}\n          //       alt=\"logo\"\n          //     />\n          //     {rowNumber === 1 && colNumber === item - 1 && play && (\n          //       <PlayerView src={liveStreamMockUrl} />\n          //     )}\n          //   </div>\n        ))}\n      </div>\n    );\n    //   <div\n    //     style={{\n    //       width: rowNumber === 1 && colNumber === 0 ? \"45vw\" : \"35vw\",\n    //       padding: \"2rem\"\n    //     }}\n    //   >\n    //     <img\n    //       style={{ width: \"100%\", boxShadow: \"0 0 10px black\" }}\n    //       src={videoImg}\n    //       alt=\"logo\"\n    //     />\n    //     {rowNumber === 1 && colNumber === 0 && play && (\n    //       <PlayerView src={liveStreamMockUrl} />\n    //     )}\n    //   </div>\n  }\n}\n\nexport default ShovelerView;\n","import React from \"react\";\nimport {\n  addLiveStreamSupport,\n  removeLoadMetadataEventListner\n} from \"../../utils/liveStreamUtil\";\n\nclass PlayerView extends React.Component {\n  componentDidMount() {\n    const video = document.getElementById(\"video\");\n    addLiveStreamSupport(video);\n  }\n  componentWillUnmount() {\n    const video = document.getElementById(\"video\");\n    removeLoadMetadataEventListner(video);\n  }\n  render() {\n    return (\n      <video\n        controls\n        style={{\n          position: \"absolute\",\n          top: \"0\",\n          left: \"0\",\n          width: \"100%\"\n        }}\n        id=\"video\"\n      />\n    );\n  }\n}\nexport default PlayerView;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport \"./firetv.scss\";\n// import Hls from \"hls.js\";\nimport {\n  addLiveStreamSupport,\n  removeLoadMetadataEventListner\n} from \"./utils/liveStreamUtil\";\nimport ShovlerView from \"./components/shovelerView/shovelerView\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowNumber: 0,\n      colNumber: 0,\n      play: false\n    };\n  }\n  componentDidMount() {\n    const that = this;\n    document.addEventListener(\"keyup\", e => {\n      console.log(e);\n      if (e.keyCode === 40) {\n        that.setState(p => ({\n          rowNumber: p.rowNumber + 1,\n          play: false\n        }));\n      } else if (e.keyCode === 38) {\n        that.setState(p => ({\n          rowNumber: p.rowNumber - 1,\n          play: false\n        }));\n      } else if (e.keyCode === 39) {\n        that.setState(p => ({\n          colNumber: p.colNumber + 1,\n          play: false\n        }));\n      } else if (e.keyCode === 37) {\n        that.setState(p => ({\n          colNumber: p.colNumber - 1,\n          play: false\n        }));\n      } else if (e.keyCode === 13) {\n        that.setState(p => ({\n          play: true\n        }));\n      }\n    });\n    // const video = document.getElementById(\"video\");\n    // addLiveStreamSupport(video);\n  }\n\n  componentWillUnmount() {\n    // const video = document.getElementById(\"video\");\n    // removeLoadMetadataEventListner(video);\n  }\n  render() {\n    const items = [1, 2, 3, 4, 5, 6, 7];\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        <header style={{ display: \"flex\" }}>\n          <button className=\"buttonn\">\n            <div>Home</div>\n          </button>\n          <button className=\"buttonn\">\n            <div>Center</div>\n          </button>\n        </header>\n        <div className=\"video-container\">\n          <span>Live Videos</span>\n          <ShovlerView\n            rowNumber={this.state.rowNumber}\n            colNumber={this.state.colNumber}\n            play={this.state.play}\n            items={[1, 2, 3, 4, 5]}\n          />\n        </div>\n        <div className=\"video-container\">\n          <span>Watch Now</span>\n          <ShovlerView\n            rowNumber={this.state.rowNumber}\n            colNumber={this.state.colNumber}\n            play={this.state.play}\n            items={[1, 2, 3, 4, 5]}\n          />\n        </div>\n\n        {/* <div>\n          <input type=\"text\" />\n        </div>\n        <div>Live Videos</div> */}\n        {/* <div>\n          <video id=\"video\"> </video>\n        </div> */}\n        {/* <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            scrollSnapType: \"x mandatory\",\n            maxWidth: \"100vw\",\n            overflow: \"scroll\"\n          }}\n        >\n          {items.map(item => (\n            <section style={{ scrollSnapAlign: \"start\" }}>\n              <a>\n                <div\n                  className=\"video-items\"\n                  style={{\n                    margin: \"1rem\",\n                    padding: \"1rem\",\n                    background: \"darkslategray\",\n                    border: \"5px solid gray\",\n                    width: \"25vw\",\n                    height: \"auto\"\n                  }}\n                  tabIndex={item}\n                  autoFocus\n                >\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </div>\n              </a>\n            </section>\n          ))} */}\n        {/* <div id=\"one-D-view-item-elements\" class=\"one-D-details-container\">\n            <div id=\"one-d-no-items\" class=\"one-d-no-items-container\">\n              No content found.\n            </div>\n            <div id=\"one-D-shoveler-container\">\n              <div class=\"shoveler-rowitem-static\">fsagsfg</div>\n              <div class=\"shoveler-rowitem-static\">fsagsfg</div>\n              <div class=\"shoveler-rowitem-static\">fsagsfg</div>\n              <div class=\"shoveler-rowitem-static\">fsagsfg</div>\n            </div>\n            <div\n              id=\"one-D-summary-container\"\n              class=\"one-D-details-summary-text\"\n            >\n              <div id=\"summaryTitle\" class=\"one-D-summary-title\" />\n              <div id=\"summaryDate\" class=\"one-D-summary-pubdate\" />\n              <div id=\"summary-buttons-container\" />\n              <div id=\"summaryDesc\" class=\"one-D-summary-description\" />\n            </div>\n          </div> */}\n        {/* </div> */}\n        {/* <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            scrollSnapType: \"x mandatory\",\n            maxWidth: \"100vw\",\n            overflow: \"scroll\"\n          }}\n        >\n          {items.map(item => (\n            <section style={{ scrollSnapAlign: \"start\" }}>\n              <a>\n                <div\n                  className=\"video-items\"\n                  style={{\n                    margin: \"1rem\",\n                    padding: \"1rem\",\n                    background: \"darkslategray\",\n                    border: \"5px solid gray\",\n                    width: \"25vw\",\n                    height: \"auto\"\n                  }}\n                  tabIndex={item}\n                  autoFocus\n                >\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </div>\n              </a>\n            </section>\n          ))}\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            scrollSnapType: \"x mandatory\",\n            maxWidth: \"100vw\",\n            overflow: \"scroll\"\n          }}\n        >\n          {items.map(item => (\n            <section style={{ scrollSnapAlign: \"start\" }}>\n              <a>\n                <div\n                  className=\"video-items\"\n                  style={{\n                    margin: \"1rem\",\n                    padding: \"1rem\",\n                    background: \"darkslategray\",\n                    border: \"5px solid gray\",\n                    width: \"25vw\",\n                    height: \"auto\"\n                  }}\n                  tabIndex={item}\n                  autoFocus\n                >\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </div>\n              </a>\n            </section>\n          ))}\n        </div> */}\n        {/* <div>\n          {items.map(item => (\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          ))}\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}